// This file is generated by Firebase Studio
import { NextRequest, NextResponse } from 'next/server';
import { getAuth } from 'firebase-admin/auth';
import { initializeApp, getApps, cert } from 'firebase-admin/app';
import { getFirestore } from 'firebase-admin/firestore';

// Initialize Firebase Admin SDK
const serviceAccount = process.env.FIREBASE_SERVICE_ACCOUNT
  ? JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT)
  : undefined;

if (!getApps().length) {
  initializeApp({
    credential: serviceAccount ? cert(serviceAccount) : undefined,
  });
}

const db = getFirestore();

// Helper to verify Firebase Auth token
async function verifyToken(req: NextRequest) {
  const authHeader = req.headers.get('Authorization');
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return null;
  }
  const token = authHeader.split('Bearer ')[1];
  try {
    const decodedToken = await getAuth().verifyIdToken(token);
    return decodedToken.uid;
  } catch (error) {
    console.error('Error verifying token:', error);
    return null;
  }
}

async function getErpCredentials(uid: string) {
    const docRef = db.collection('userCredentials').doc(uid);
    const docSnap = await docRef.get();

    if (!docSnap.exists) {
        throw new Error('ERPNext credentials not found for this user.');
    }
    const data = docSnap.data();
    if (!data?.erpUrl || !data?.apiKey || !data?.apiSecret) {
        throw new Error('Incomplete ERPNext credentials configured.');
    }
    return {
        url: data.erpUrl,
        apiKey: data.apiKey,
        apiSecret: data.apiSecret,
    };
}


export async function POST(req: NextRequest) {
  try {
    const uid = await verifyToken(req);
    if (!uid) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { endpoint, method = 'GET', body } = await req.json();
    const { url, apiKey, apiSecret } = await getErpCredentials(uid);

    const fullUrl = `${url.replace(/\/$/, '')}${endpoint}`;

    const headers: Record<string, string> = {
      'Authorization': `token ${apiKey}:${apiSecret}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    };

    const requestOptions: RequestInit = {
      method,
      headers,
      body: body ? JSON.stringify(body) : undefined,
      cache: 'no-store',
    };
    
    const response = await fetch(fullUrl, requestOptions);

    if (!response.ok) {
        let errorDetails = '';
        try {
            const errorBody = await response.json();
            errorDetails = errorBody.message || errorBody.exception || errorBody.error || JSON.stringify(errorBody);
        } catch {
            errorDetails = await response.text();
        }
        return NextResponse.json({ error: `Request failed with status ${response.status}: ${errorDetails}` }, { status: response.status });
    }

    if (response.status === 204) {
      return new NextResponse(null, { status: 204 });
    }

    const data = await response.json();
    return NextResponse.json(data);

  } catch (err: any) {
    console.error("API Proxy Error:", err);
    const errorMessage = err.cause?.code === 'ENOTFOUND'
      ? `Could not connect to ERPNext server. Please check the URL and network connection.`
      : err.message || 'An unexpected error occurred in the API proxy.';
      
    return NextResponse.json(
      { error: errorMessage },
      { status: 500 }
    );
  }
}

export async function OPTIONS() {
  return new NextResponse(null, {
    status: 204,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  });
}
