// This file is generated by Firebase Studio

import { NextResponse } from 'next/server';
import cheerio from 'cheerio';

export async function POST(req: Request) {
  try {
    const { endpoint, method = 'GET', body } = await req.json();

    const url = process.env.ERPNEXT_BASE_URL;
    const apiKey = process.env.ERPNEXT_API_KEY;
    const apiSecret = process.env.ERPNEXT_API_SECRET;
    
    if (!url || !apiKey || !apiSecret) {
        return NextResponse.json(
            { error: 'ERPNext credentials are not configured in the environment variables.' },
            { status: 500 }
        );
    }

    const fullUrl = `${url.replace(/\/$/, '')}${endpoint}`;

    const headers: Record<string, string> = {
      'Authorization': `token ${apiKey}:${apiSecret}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    };

    const requestOptions: RequestInit = {
      method,
      headers,
      body: body ? JSON.stringify(body) : undefined,
      cache: 'no-store', // Ensure fresh data is fetched
    };
    
    const response = await fetch(fullUrl, requestOptions);

    if (!response.ok) {
        let errorDetails = `Request failed with status ${response.status}`;
        try {
            const errorText = await response.text();
            
            // Check if the response is HTML (like a Cloudflare error page)
            if (errorText.trim().startsWith('<!doctype html>')) {
                const $ = cheerio.load(errorText);
                // Extract a more meaningful title or header from the HTML
                const pageTitle = $('title').text();
                const h2Title = $('h2').first().text();
                errorDetails = `${errorDetails}: ${pageTitle || h2Title || 'Received an HTML error page.'}`;
            } else {
                 // Try to parse it as JSON, as expected from the API
                const errorBody = JSON.parse(errorText);
                if (errorBody._server_messages) {
                     const serverMessage = JSON.parse(errorBody._server_messages)[0];
                     errorMessage = JSON.parse(serverMessage).message || serverMessage;
                } else {
                    errorMessage = errorBody.message || errorBody.exception || errorBody.error || JSON.stringify(errorBody);
                }
            }
        } catch {
            // If any parsing fails, fallback to the status text
            errorDetails = `${errorDetails}: ${response.statusText}`;
        }
        
        return NextResponse.json({ error: errorDetails }, { status: response.status });
    }

    // Handle no content response
    if (response.status === 204) {
      return new NextResponse(null, { status: 204 });
    }

    const data = await response.json();
    return NextResponse.json(data);

  } catch (err: any) {
    console.error("API Proxy Error:", err);
    // Provide a more specific error message for network/fetch failures
    const errorMessage = err.cause?.code === 'ENOTFOUND'
      ? `Could not connect to ERPNext server at ${process.env.ERPNEXT_BASE_URL}. Please check the URL and network connection.`
      : err.message || 'An unexpected error occurred in the API proxy.';
      
    return NextResponse.json(
      { error: errorMessage },
      { status: 500 }
    );
  }
}

// Handle OPTIONS requests for CORS preflight
export async function OPTIONS() {
  return new NextResponse(null, {
    status: 204,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  });
}
