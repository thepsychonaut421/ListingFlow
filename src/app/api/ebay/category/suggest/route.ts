
// This file is generated by Firebase Studio

import { NextResponse } from "next/server";
import path from 'path';
import fs from 'fs/promises';

type Cat = { id: string; name?: string; path: string, keywords?: string[] };

function calculateScore(cat: Cat, query: string) {
    const q = query.toLowerCase().trim();
    if (!q) return 0;

    let score = 0;
    const path = (cat.path || "").toLowerCase();
    const name = (cat.name || "").toLowerCase();
    const keywords = (cat.keywords || []).map(k => k.toLowerCase());

    const queryWords = q.split(/\s+/).filter(w => w.length > 2);

    // High score for matching keywords
    for (const keyword of keywords) {
        if (q.includes(keyword)) {
            score += 10;
        }
    }
    
    // Score for words from query appearing in path
    for (const word of queryWords) {
        if (path.includes(word)) {
            score += 2;
        }
    }

    // Bonus for exact name match in path
    if (name && path.includes(name)) {
        score += 5;
    }
    
    return score;
}

export async function GET(req: Request) {
  try {
    const { searchParams } = new URL(req.url);
    const q = (searchParams.get("q") || "").trim();
    if (!q) return NextResponse.json({ suggestions: [] });

    // Correctly load the JSON file from the filesystem at runtime
    const jsonPath = path.join(process.cwd(), 'public', 'data', 'ebay-categories.de.json');
    const fileContents = await fs.readFile(jsonPath, 'utf8');
    const data = JSON.parse(fileContents);
    
    const cats: Cat[] = (data.categories as any) ?? [];
    
    const ranked = cats
      .map(c => ({ ...c, _score: calculateScore(c, q) }))
      .filter(c => c._score > 0)
      .sort((a, b) => b._score - a._score)
      .slice(0, 8)
      .map(({ _score, ...c }) => c);

    return NextResponse.json({ suggestions: ranked });
  } catch (error) {
    console.error("Failed to read or parse eBay categories file:", error);
    return NextResponse.json({ error: "Internal server error while fetching category suggestions." }, { status: 500 });
  }
}
