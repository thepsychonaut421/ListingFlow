// This file is generated by Firebase Studio
'use client';

import * as React from 'react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Download } from 'lucide-react';
import type { Product } from '@/lib/types';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { useToast } from '@/hooks/use-toast';
import { generateCsv } from '@/lib/csv-generator';
import { useSelectionStore } from '@/stores/selection-store';

function ExportsClient() {
  const [products, setProducts] = React.useState<Product[]>([]);
  const { toast } = useToast();
  const selectedIds = useSelectionStore(state => state.selectedIds);


  React.useEffect(() => {
    try {
      // Get all products from local storage
      const allProductsJSON = localStorage.getItem('listingFlowProducts');
      const allProducts: Product[] = allProductsJSON ? JSON.parse(allProductsJSON) : [];
      
      // Filter the full product list to get the selected products
      if (allProducts.length > 0 && selectedIds.size > 0) {
        const selected = allProducts.filter(p => selectedIds.has(p.id));
        setProducts(selected);
      } else {
        setProducts([]);
      }
    } catch (error) {
      console.error('Failed to parse selected products from localStorage', error);
      setProducts([]); // Default to an empty array on error
    }
  }, [selectedIds]);

  const handleExport = (format: 'ebay' | 'shopify') => {
    if (products.length === 0) {
      toast({
        variant: 'destructive',
        title: 'Export Failed',
        description: 'There are no selected products to export. Please select products from the dashboard.',
      });
      return;
    }

    try {
      const csvContent = generateCsv(products, format);
      const fileName = `${format}-export-${new Date().toISOString()}.csv`;
      const successMessage = `Your ${products.length} selected products have been exported to the ${format} CSV format.`;
      
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', fileName);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      toast({
        title: 'Export Successful',
        description: successMessage,
      });
    } catch (error) {
      console.error(`Failed to generate ${format} CSV:`, error);
      toast({
        variant: 'destructive',
        title: 'Export Failed',
        description: `Could not generate the ${format} export file. Please try again.`,
      });
    }
  };


  return (
    <Card>
      <CardHeader>
        <div className="flex items-start justify-between">
          <div>
            <CardTitle>Product Exports</CardTitle>
            <CardDescription>
             Export your selected product data to platform-specific CSV formats. Currently exporting {products.length} selected products.
            </CardDescription>
          </div>
          <div className="flex gap-2">
            <Button onClick={() => handleExport('ebay')}>
              <Download className="mr-2 h-4 w-4" />
              Export to eBay
            </Button>
            <Button onClick={() => handleExport('shopify')} variant="secondary">
              <Download className="mr-2 h-4 w-4" />
              Export to Shopify
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="ebay">
          <TabsList>
            <TabsTrigger value="ebay">eBay Preview</TabsTrigger>
            <TabsTrigger value="shopify">Shopify Preview</TabsTrigger>
          </TabsList>
          <TabsContent value="ebay">
             <p className="text-sm text-muted-foreground my-4">
              This tool generates a CSV file based on the eBay File Exchange format for drafts. The file is tab-separated and must start with a specific header row. Ensure you are uploading this file to the "Upload Template" section in your Seller Hub Reports tab.
            </p>
            <div className="rounded-md border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Action</TableHead>
                    <TableHead>Title</TableHead>
                    <TableHead>Custom label (SKU)</TableHead>
                    <TableHead>Category ID</TableHead>
                    <TableHead>Price</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {products.length > 0 ? (
                    products.map((product) => (
                      <TableRow key={product.id}>
                        <TableCell className="font-medium">Draft</TableCell>
                        <TableCell>{product.name}</TableCell>
                        <TableCell>{product.code}</TableCell>
                        <TableCell>{product.ebayCategoryId}</TableCell>
                        <TableCell>{product.price ? product.price.toFixed(2) : '0.00'}</TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={5} className="h-24 text-center">
                        No selected products to preview. Go to the dashboard to select some.
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </div>
          </TabsContent>
          <TabsContent value="shopify">
             <p className="text-sm text-muted-foreground my-4">
              This tool generates a CSV file based on the standard Shopify product import format. Below is a preview of some of the data that will be included.
            </p>
             <div className="rounded-md border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Handle</TableHead>
                    <TableHead>Title</TableHead>
                    <TableHead>Vendor</TableHead>
                    <TableHead>Variant Price</TableHead>
                     <TableHead>Variant Barcode</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {products.length > 0 ? (
                    products.map((product) => (
                      <TableRow key={product.id}>
                        <TableCell className="font-medium">{product.name.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '')}</TableCell>
                        <TableCell>{product.name}</TableCell>
                        <TableCell>{(product.technicalSpecs?.Marke || product.technicalSpecs?.brand) as string}</TableCell>
                        <TableCell>{product.price ? product.price.toFixed(2) : '0.00'}</TableCell>
                        <TableCell>{(product.technicalSpecs?.EAN || product.technicalSpecs?.ean) as string}</TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={5} className="h-24 text-center">
                         No selected products to preview. Go to the dashboard to select some.
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
}


export default function ExportsPage() {
  return (
    <main className="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
      <ExportsClient />
    </main>
  );
}
