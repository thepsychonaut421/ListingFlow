// This file is generated by Firebase Studio
'use client';

import * as React from 'react';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useToast } from '@/hooks/use-toast';
import { Trash2, Loader2, Save } from 'lucide-react';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"
import { useAuth } from '@/contexts/auth-context';
import { doc, getDoc, setDoc } from 'firebase/firestore';
import { db } from '@/lib/firebase/client';

function SettingsClient() {
  const { toast } = useToast();
  const { user } = useAuth();
  const [erpUrl, setErpUrl] = React.useState('');
  const [apiKey, setApiKey] = React.useState('');
  const [apiSecret, setApiSecret] = React.useState('');
  const [isLoading, setIsLoading] = React.useState(true);
  const [isSaving, setIsSaving] = React.useState(false);

  React.useEffect(() => {
    const fetchCredentials = async () => {
      if (!user) return;
      setIsLoading(true);
      try {
        const docRef = doc(db, 'userCredentials', user.uid);
        const docSnap = await getDoc(docRef);
        if (docSnap.exists()) {
          const data = docSnap.data();
          setErpUrl(data.erpUrl || '');
          setApiKey(data.apiKey || '');
          setApiSecret(data.apiSecret || '');
        }
      } catch (error) {
        console.error("Error fetching credentials:", error);
        toast({
          variant: 'destructive',
          title: 'Error',
          description: 'Failed to load ERPNext credentials.',
        });
      } finally {
        setIsLoading(false);
      }
    };
    fetchCredentials();
  }, [user, toast]);
  

  const handleSaveCredentials = async () => {
     if (!user) {
        toast({ variant: 'destructive', title: 'Error', description: 'You must be logged in to save credentials.' });
        return;
    }
    setIsSaving(true);
    try {
        const docRef = doc(db, 'userCredentials', user.uid);
        await setDoc(docRef, { erpUrl, apiKey, apiSecret }, { merge: true });
        toast({
            title: 'Credentials Saved',
            description: 'Your ERPNext credentials have been securely saved.',
        });
    } catch (error) {
        console.error("Error saving credentials:", error);
        toast({
          variant: 'destructive',
          title: 'Save Failed',
          description: 'Could not save your credentials. Please try again.',
        });
    } finally {
        setIsSaving(false);
    }
  };

  const handleClearData = () => {
    localStorage.removeItem('listingFlowProducts');
    toast({
      title: 'Local Data Cleared',
      description: 'Your local product data has been successfully deleted from the browser.',
    });
     setTimeout(() => window.location.href = '/', 1000);
  };

  return (
    <div className="grid gap-6">
       <Card>
        <CardHeader>
          <CardTitle>ERPNext Integration</CardTitle>
          <CardDescription>
            Enter your ERPNext credentials below. They will be stored securely and associated with your account.
          </CardDescription>
        </CardHeader>
        <CardContent>
            {isLoading ? (
                <div className="flex items-center justify-center p-8">
                    <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
                </div>
            ) : (
                <div className="space-y-4">
                    <div className="space-y-2">
                        <Label htmlFor="erp-url">ERPNext URL</Label>
                        <Input id="erp-url" value={erpUrl} onChange={(e) => setErpUrl(e.target.value)} placeholder="https://your-erp.rembayer.info" />
                    </div>
                     <div className="space-y-2">
                        <Label htmlFor="api-key">API Key</Label>
                        <Input id="api-key" value={apiKey} onChange={(e) => setApiKey(e.target.value)} placeholder="your_api_key" />
                    </div>
                     <div className="space-y-2">
                        <Label htmlFor="api-secret">API Secret</Label>
                        <Input id="api-secret" type="password" value={apiSecret} onChange={(e) => setApiSecret(e.target.value)} placeholder="your_api_secret" />
                    </div>
                </div>
            )}
        </CardContent>
        <CardFooter className="border-t px-6 py-4">
            <Button onClick={handleSaveCredentials} disabled={isSaving || isLoading}>
                {isSaving ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Save className="mr-2 h-4 w-4" />}
                Save Credentials
            </Button>
        </CardFooter>
      </Card>

      <Card className="border-destructive">
          <CardHeader>
              <CardTitle>Danger Zone</CardTitle>
              <CardDescription>These actions are permanent and cannot be undone.</CardDescription>
          </CardHeader>
          <CardContent>
              <AlertDialog>
                  <AlertDialogTrigger asChild>
                      <Button variant="destructive">
                          <Trash2 className="mr-2 h-4 w-4" />
                          Clear All Local Product Data
                      </Button>
                  </AlertDialogTrigger>
                  <AlertDialogContent>
                      <AlertDialogHeader>
                      <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                      <AlertDialogDescription>
                          This action cannot be undone. This will permanently delete all your product data
                          from your browser's local storage. Your API credentials in .env will not be affected.
                      </AlertDialogDescription>
                      </AlertDialogHeader>
                      <AlertDialogFooter>
                      <AlertDialogCancel>Cancel</AlertDialogCancel>
                      <AlertDialogAction onClick={handleClearData}>Continue</AlertDialogAction>
                      </AlertDialogFooter>
                  </AlertDialogContent>
              </AlertDialog>
          </CardContent>
      </Card>
    </div>
  )
}

export default function SettingsPage() {
  return (
    <main className="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
      <SettingsClient />
    </main>
  );
}
