// This file is generated by Firebase Studio
'use client';

import * as React from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';
import type { Product } from '@/lib/types';
import { X, FilePenLine } from 'lucide-react';

interface SelectedProductsProps {
  products: Product[];
  onBulkEdit: () => void;
  onClear: () => void;
  onRemove: (id: string) => void;
  onEditProduct: (product: Product) => void;
}

export function SelectedProducts({ products, onBulkEdit, onClear, onRemove, onEditProduct }: SelectedProductsProps) {

  if (products.length === 0) {
    return null;
  }
  
  const handleCardClick = (product: Product) => {
    onEditProduct(product);
  }
  
  const handleRemoveClick = (e: React.MouseEvent, id: string) => {
    e.stopPropagation(); // Prevent the card click event from firing
    onRemove(id);
  }

  return (
    <Card className="border-primary">
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <CardTitle>Selected Products ({products.length})</CardTitle>
            <CardDescription>
              The products you've selected appear here. You can manage them all at once.
            </CardDescription>
          </div>
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm" onClick={onBulkEdit}>
                <FilePenLine className="mr-2 h-4 w-4" />
                Bulk Edit
            </Button>
            <Button variant="destructive" size="sm" onClick={onClear}>
                <X className="mr-2 h-4 w-4" />
                Clear Selection
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <ScrollArea className="w-full whitespace-nowrap">
          <div className="flex w-max space-x-4 pb-4">
            {products.map((product) => (
              <div 
                key={product.id} 
                className="relative group w-40 cursor-pointer"
                onClick={() => handleCardClick(product)}
                onKeyDown={(e) => (e.key === 'Enter' || e.key === ' ') && handleCardClick(product)}
                role="button"
                tabIndex={0}
                title={`Edit ${product.name}`}
               >
                <Button
                  variant="destructive"
                  size="icon"
                  className="absolute top-1 right-1 h-6 w-6 bg-black/50 text-white opacity-0 group-hover:opacity-100 transition-opacity z-10"
                  onClick={(e) => handleRemoveClick(e, product.id)}
                  title="Deselect"
                >
                  <X className="h-4 w-4" />
                </Button>
                <div className="overflow-hidden rounded-md border hover:border-primary">
                  <img
                    src={product.images?.[0] || 'https://placehold.co/150x150.png'}
                    alt={product.name}
                    className="h-40 w-40 object-cover transition-transform group-hover:scale-105"
                    data-ai-hint="product image"
                  />
                </div>
                <div className="pt-2">
                  <p className="text-sm font-medium leading-none truncate">{product.name}</p>
                  <p className="text-xs text-muted-foreground">{product.code}</p>
                </div>
              </div>
            ))}
          </div>
          <ScrollBar orientation="horizontal" />
        </ScrollArea>
      </CardContent>
    </Card>
  );
}
