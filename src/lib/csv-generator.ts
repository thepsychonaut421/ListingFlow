// This file is generated by Firebase Studio

import type { Product } from './types';

type Platform = 'ebay' | 'shopify';

// --- Helper Functions ---

// Escapes a field for comma-delimited CSV files.
const escapeCommaCsvField = (field: any): string => {
  if (field === null || field === undefined) return '';
  const stringField = String(field);
  if (/[,"\n]/.test(stringField)) {
    return `"${stringField.replace(/"/g, '""')}"`;
  }
  return stringField;
};

// Escapes a field for semicolon-delimited CSV files.
const escapeSemicolonCsvField = (field: any): string => {
  if (field === null || field === undefined) return '';
  const stringField = String(field);
  if (/[;\n"]/.test(stringField)) {
    return `"${stringField.replace(/"/g, '""')}"`;
  }
  return stringField;
};


// --- eBay Specific Logic ---

const getEbayConditionId = (status: Product['listingStatus']): number => {
  switch (status) {
    case 'new': return 1000;
    case 'used': return 3000;
    case 'refurbished': return 2500;
    default: return 1000;
  }
};

const generateEbayCsvContent = (products: Product[]): string => {
  const headers = [
    'Action(SiteID=Germany|Country=DE|Currency=EUR|Version=1193|CC=UTF-8)',
    'Custom label (SKU)',
    'Category ID',
    'Title',
    'UPC',
    'Price',
    'Quantity',
    'Item photo URL',
    'Condition ID',
    'Description',
    'Format',
    'C:Marke',
    'C:Produktart'
  ];

  const rows = products.map(product => {
    const rowData = {
      'Action': 'Draft',
      'Custom label (SKU)': product.code,
      'Category ID': product.ebayCategoryId,
      'Title': product.name,
      'UPC': product.ean || '',
      'Price': product.price.toFixed(2),
      'Quantity': product.quantity,
      'Item photo URL': product.image,
      'Condition ID': getEbayConditionId(product.listingStatus),
      'Description': product.description,
      'Format': 'FixedPrice',
      'C:Marke': product.brand,
      'C:Produktart': product.productType
    };
    return headers.map(header => escapeSemicolonCsvField(rowData[header as keyof typeof rowData])).join(';');
  });

  const fileInfoHeaders = [
    '#INFO;Version=0.0.2;Template=eBay-draft-listings-template_DE;;;;;;;;;;;',
    '#INFO;Action und Category ID sind erforderliche Felder. 1) Stellen Sie Action auf Draft ein. 2) Die Kategorie-ID für Ihre Angebote finden Sie hier: https://pages.ebay.com/sellerinformation/news/categorychanges.html;;;;;;;;;;;',
    '#INFO;Nachdem Sie Ihren Entwurf erfolgreich im Berichte-Tab Ihres Verkäufer-Cockpit Pro heruntergeladen haben; können Sie die Entwürfe hier zu aktiven Angeboten vervollständigen: https://www.ebay.de/sh/lst/drafts;;;;;;;;;;;',
    '#INFO;;;;;;;;;;;;'
  ];

  return [...fileInfoHeaders, headers.join(';'), ...rows].join('\n');
};

// --- Shopify Specific Logic ---

const getShopifyCondition = (status: Product['listingStatus']): string => {
  switch (status) {
    case 'new': return 'new';
    case 'used': return 'used';
    case 'refurbished': return 'refurbished';
    default: return 'new';
  }
};

const generateShopifyCsvContent = (products: Product[]): string => {
  const headers = [
    'Handle', 'Title', 'Body (HTML)', 'Vendor', 'Product Category', 'Type', 'Tags', 
    'Published', 'Option1 Name', 'Option1 Value', 'Option2 Name', 'Option2 Value', 
    'Option3 Name', 'Option3 Value', 'Variant SKU', 'Variant Grams', 
    'Variant Inventory Tracker', 'Variant Inventory Qty', 'Variant Inventory Policy',
    'Variant Fulfillment Service', 'Variant Price', 'Variant Compare At Price',
    'Variant Requires Shipping', 'Variant Taxable', 'Variant Barcode', 'Image Src',
    'Image Position', 'Image Alt Text', 'Gift Card', 'SEO Title', 'SEO Description',
    'Google Shopping / Google Product Category', 'Google Shopping / Gender',
    'Google Shopping / Age Group', 'Google Shopping / MPN', 'Google Shopping / AdWords Grouping',
    'Google Shopping / AdWords Labels', 'Google Shopping / Condition', 'Google Shopping / Custom Product',
    'Google Shopping / Custom Label 0', 'Google Shopping / Custom Label 1',
    'Google Shopping / Custom Label 2', 'Google Shopping / Custom Label 3',
    'Google Shopping / Custom Label 4', 'Variant Image', 'Variant Weight Unit',
    'Variant Tax Code', 'Cost per item', 'Status'
  ];

  const rows = products.map(product => {
    const handle = product.name.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
    const rowData = {
      'Handle': handle,
      'Title': product.name,
      'Body (HTML)': product.description,
      'Vendor': product.brand,
      'Product Category': product.category,
      'Type': product.productType,
      'Tags': product.tags.join(', '),
      'Published': 'true',
      'Option1 Name': 'Title',
      'Option1 Value': 'Default Title',
      'Option2 Name': '', 'Option2 Value': '', 'Option3 Name': '', 'Option3 Value': '',
      'Variant SKU': product.code,
      'Variant Grams': '0',
      'Variant Inventory Tracker': 'shopify',
      'Variant Inventory Qty': product.quantity,
      'Variant Inventory Policy': 'deny',
      'Variant Fulfillment Service': 'manual',
      'Variant Price': product.price.toFixed(2),
      'Variant Compare At Price': '',
      'Variant Requires Shipping': 'true',
      'Variant Taxable': 'true',
      'Variant Barcode': product.ean,
      'Image Src': product.image,
      'Image Position': '1',
      'Image Alt Text': product.name,
      'Gift Card': 'false',
      'SEO Title': `${product.name} - ${product.brand || ''}`,
      'SEO Description': product.description.substring(0, 320),
      'Google Shopping / Google Product Category': product.category,
      'Google Shopping / Gender': '', 'Google Shopping / Age Group': '',
      'Google Shopping / MPN': product.code,
      'Google Shopping / AdWords Grouping': '', 'Google Shopping / AdWords Labels': '',
      'Google Shopping / Condition': getShopifyCondition(product.listingStatus),
      'Google Shopping / Custom Product': '', 'Google Shopping / Custom Label 0': '',
      'Google Shopping / Custom Label 1': '', 'Google Shopping / Custom Label 2': '',
      'Google Shopping / Custom Label 3': '', 'Google Shopping / Custom Label 4': '',
      'Variant Image': '', 'Variant Weight Unit': 'kg', 'Variant Tax Code': '',
      'Cost per item': '',
      'Status': 'active'
    };
    return headers.map(header => escapeCommaCsvField(rowData[header as keyof typeof rowData])).join(',');
  });

  return [headers.join(','), ...rows].join('\n');
};


// --- Main Export Function ---

export const generateCsv = (products: Product[], platform: Platform): string => {
  switch (platform) {
    case 'ebay':
      return generateEbayCsvContent(products);
    case 'shopify':
      return generateShopifyCsvContent(products);
    default:
      throw new Error(`Unsupported platform: ${platform}`);
  }
};
