// This file is generated by Firebase Studio

import type { Product } from './types';

type Platform = 'ebay' | 'shopify';

// --- Constants ---
const EOL = '\n';
const UTF8_BOM = '\uFEFF';
const SHOPIFY_PLACEHOLDER_IMAGE = 'https://placehold.co/600x600.png';


// --- Helper Functions ---

const cleanSemicolonCsvField = (field: any): string => {
    if (field === null || field === undefined) return '';
    // This will also handle the description cleaning by removing problematic chars.
    return String(field).replace(/[\t\n\r;]/g, ' ').trim();
};

const escapeCommaCsvField = (field: any): string => {
  if (field === null || field === undefined) return '';
  const stringField = String(field).trim();
  if (/[,"\n\r]/.test(stringField)) {
    return `"${stringField.replace(/"/g, '""')}"`;
  }
  return stringField;
};

const buildCsvBody = (headers: string[], dataRows: string[][], delimiter: string): string => {
  const headerRow = headers.join(delimiter);
  const contentRows = dataRows.map(row => row.join(delimiter));
  return [headerRow, ...contentRows].join(EOL);
};

const safeTitle = (title?: string): string => {
    return (title || '').slice(0, 80).trim();
}

const safeImage = (url?: string): string => {
    if (url && (url.startsWith('http://') || url.startsWith('https://'))) {
        return url;
    }
    return ''; // Return empty string if invalid, eBay handles missing images.
}


// --- eBay Specific Logic ---

const getEbayConditionId = (status: Product['listingStatus']): number => {
  switch (status) {
    case 'new': return 1000;
    case 'used': return 3000;
    case 'refurbished': return 2500;
    default: return 1000; // Default to 'New' if status is draft/error etc.
  }
};

const pickVal = (
  product: Product,
  specs: Record<string, any>,
  ...keys: string[]
): string => {
  for (const k of keys) {
    // Look in specs first (case-sensitive), then product object, then case-insensitive
    const v =
      specs[k] ??
      (product as any)[k] ??
      specs[Object.keys(specs).find(sk => sk.toLowerCase() === k.toLowerCase())] ??
      (product as any)[k.toLowerCase()];
      
    if (v !== undefined && v !== null && String(v).trim() !== '') {
      return Array.isArray(v) ? v.join(', ') : String(v).trim();
    }
  }
  return '';
};


const inferProductType = (title: string, categoryId?: string): string => {
  const t = title.toLowerCase();
  if (categoryId === '36029' || /polo.?hemd|polo.?shirt/.test(t)) return 'Polohemd';
  if (/heissluftfrit+euse|air\s*fryer/.test(t)) return 'Heißluftfritteuse';
  if (/inlineskates|inline skates/.test(t)) return 'Inlineskates';
  if (/lautsprecher|speaker/.test(t)) return 'Lautsprecher';
  if (/teppich|rug/.test(t)) return 'Teppich';
  if (/topf(set)?|kochgeschirr|pfanne/.test(t)) return 'Kochgeschirr';
  if (/koch(en)?maschine|küchenmaschine/.test(t)) return 'Küchenmaschine';
  if (/staubsauger|vacuum/.test(t)) return 'Staubsauger';
  return '';
};


const generateEbayCsvContent = (products: Product[]): string => {
  const headers = [
    'Action(SiteID=Germany|Country=DE|Currency=EUR|Version=1193|CC=UTF-8)',
    'Custom label (SKU)', 'Category ID', 'Title', 'UPC', 'Price', 'Quantity',
    'Item photo URL', 'Condition ID', 'Description', 'Format', 'C:Marke', 'C:Produktart',
    'C:Modell', 'C:Herstellernummer' // MPN
  ];

  const dataRows = products
    .filter(product => product.code) 
    .map(product => {
      const specs = product.technicalSpecs || {};
      const brand = pickVal(product, specs, 'Marke', 'brand', 'Brand');
      let productType = pickVal(product, specs, 'Produktart', 'productType', 'Type');
      if (!productType) productType = inferProductType(product.name, product.ebayCategoryId);

      const model = pickVal(product, specs, 'Modell', 'model', 'Model');
      const mpn = product.code; // Use SKU as MPN
      const ean = pickVal(product, specs, 'EAN', 'ean', 'Barcode');


      return [
      'Draft',
      product.code,
      product.ebayCategoryId,
      safeTitle(product.name),
      ean,
      product.price ? product.price.toFixed(2) : '0.00',
      product.quantity,
      safeImage(product.image),
      getEbayConditionId(product.listingStatus),
      product.description, // cleanSemicolonCsvField handles this below
      'FixedPrice',
      brand,
      productType,
      model,
      mpn,
    ].map(cleanSemicolonCsvField)
  });
  
  const ebayTemplateIdentifier = '#INFO;Version=0.0.2;Template= eBay-draft-listings-template_DE;;;;;;;';
  const csvBody = buildCsvBody(headers, dataRows, ';');
  const finalCsv = [ UTF8_BOM + ebayTemplateIdentifier, csvBody ].join(EOL);
  
  return finalCsv.replace(/\n/g, '\r\n');
};


// --- Shopify Specific Logic ---

const getShopifyCondition = (status: Product['listingStatus']): string => {
  switch (status) {
    case 'new': return 'new';
    case 'used': return 'used';
    case 'refurbished': return 'refurbished';
    default: return 'new';
  }
};

const ensureValidImageSrc = (url?: string): string => {
    if (url && (url.startsWith('http://') || url.startsWith('https://'))) {
        return url;
    }
    return SHOPIFY_PLACEHOLDER_IMAGE;
};


const generateShopifyCsvContent = (products: Product[]): string => {
  const headers = [
    'Handle', 'Title', 'Body (HTML)', 'Vendor', 'Product Category', 'Type', 'Tags', 
    'Published', 'Option1 Name', 'Option1 Value', 'Variant SKU', 'Variant Grams', 
    'Variant Inventory Tracker', 'Variant Inventory Qty', 'Variant Inventory Policy',
    'Variant Fulfillment Service', 'Variant Price', 'Variant Requires Shipping', 
    'Variant Taxable', 'Variant Barcode', 'Image Src', 'Image Position', 'Image Alt Text', 
    'Gift Card', 'SEO Title', 'SEO Description', 
    'Google Shopping / Google Product Category', 'Google Shopping / Condition',
    'Google Shopping / MPN', 'Status'
  ];

  const dataRows = products
    .filter(product => product.code)
    .map(product => {
      const handle = product.name.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
      const imageUrl = ensureValidImageSrc(product.image);
      const specs = product.technicalSpecs || {};
      const brand = pickVal(product, specs, 'Marke', 'brand', 'Brand');
      let productType = pickVal(product, specs, 'Produktart', 'productType', 'Type');
      if (!productType) productType = inferProductType(product.name, product.ebayCategoryId);
      
      const ean = pickVal(product, specs, 'EAN', 'ean', 'Barcode');
      const mpn = product.code; // Use SKU as MPN
      const weight = pickVal(product, specs, 'Gewicht', 'weight') || '0';


      const rowData: Record<string, any> = {
        'Handle': handle, 'Title': product.name, 'Body (HTML)': product.description,
        'Vendor': brand, 'Product Category': product.category, 'Type': productType,
        'Tags': (product.tags || []).join(', '), 'Published': 'true', 'Option1 Name': 'Title',
        'Option1 Value': 'Default Title', 'Variant SKU': product.code, 
        'Variant Grams': parseFloat(weight.replace(/[^0-9.]/g, '')) * 1000,
        'Variant Inventory Tracker': 'shopify', 'Variant Inventory Qty': product.quantity,
        'Variant Inventory Policy': 'deny', 'Variant Fulfillment Service': 'manual',
        'Variant Price': product.price ? product.price.toFixed(2) : '0.00', 'Variant Requires Shipping': 'true',
        'Variant Taxable': 'true', 'Variant Barcode': ean, 
        'Image Src': imageUrl, 'Image Position': '1', 'Image Alt Text': product.name,
        'Gift Card': 'false', 'SEO Title': `${product.name} - ${brand || ''}`,
        'SEO Description': product.description ? product.description.substring(0, 320) : '',
        'Google Shopping / Google Product Category': product.category,
        'Google Shopping / Condition': getShopifyCondition(product.listingStatus),
        'Google Shopping / MPN': mpn,
        'Status': 'active'
      };
      return headers.map(header => escapeCommaCsvField(rowData[header] ?? ''));
    });

  const rawCsv = buildCsvBody(headers, dataRows, ',');
  return UTF8_BOM + rawCsv.replace(/\n/g, '\r\n');
};


// --- Main Export Function ---

export const generateCsv = (products: Product[], platform: Platform): string => {
  switch (platform) {
    case 'ebay':
      return generateEbayCsvContent(products);
    case 'shopify':
      return generateShopifyCsvContent(products);
    default:
      console.error(`Unsupported platform: ${platform}`);
      return '';
  }
};
