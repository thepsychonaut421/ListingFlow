// This file is generated by Firebase Studio

import type { Product } from './types';

// Helper function to escape CSV fields for comma-delimited files
const escapeCsvField = (field: any): string => {
  if (field === null || field === undefined) {
    return '';
  }
  const stringField = String(field);
  // If the field contains a comma, double quote, or newline, enclose it in double quotes
  if (/[,\n"]/.test(stringField)) {
    // Within a quoted field, any double quote must be escaped by another double quote
    return `"${stringField.replace(/"/g, '""')}"`;
  }
  return stringField;
};

// Maps our simple status to Shopify's Condition values
const getCondition = (status: Product['listingStatus']): string => {
    switch (status) {
        case 'new': return 'new';
        case 'used': return 'used';
        case 'refurbished': return 'refurbished';
        default: return 'new'; // Default to 'New'
    }
}

export const generateShopifyCsv = (products: Product[]): string => {
  const headers = [
    'Handle', 'Title', 'Body (HTML)', 'Vendor', 'Product Category', 'Type', 'Tags', 
    'Published', 'Option1 Name', 'Option1 Value', 'Option2 Name', 'Option2 Value', 
    'Option3 Name', 'Option3 Value', 'Variant SKU', 'Variant Grams', 
    'Variant Inventory Tracker', 'Variant Inventory Qty', 'Variant Inventory Policy',
    'Variant Fulfillment Service', 'Variant Price', 'Variant Compare At Price',
    'Variant Requires Shipping', 'Variant Taxable', 'Variant Barcode', 'Image Src',
    'Image Position', 'Image Alt Text', 'Gift Card', 'SEO Title', 'SEO Description',
    'Google Shopping / Google Product Category', 'Google Shopping / Gender',
    'Google Shopping / Age Group', 'Google Shopping / MPN', 'Google Shopping / AdWords Grouping',
    'Google Shopping / AdWords Labels', 'Google Shopping / Condition', 'Google Shopping / Custom Product',
    'Google Shopping / Custom Label 0', 'Google Shopping / Custom Label 1',
    'Google Shopping / Custom Label 2', 'Google Shopping / Custom Label 3',
    'Google Shopping / Custom Label 4', 'Variant Image', 'Variant Weight Unit',
    'Variant Tax Code', 'Cost per item', 'Status'
  ];

  const rows = products.map(product => {
    // Create a slug-like handle for Shopify
    const handle = product.name.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');

    const rowData = {
        'Handle': handle,
        'Title': product.name,
        'Body (HTML)': product.description,
        'Vendor': product.brand,
        'Product Category': product.category, // This now holds the Shopify-approved category string
        'Type': product.productType, // This is for the custom product type
        'Tags': product.tags.join(', '),
        'Published': 'true',
        'Option1 Name': 'Title',
        'Option1 Value': 'Default Title',
        'Option2 Name': '',
        'Option2 Value': '',
        'Option3 Name': '',
        'Option3 Value': '',
        'Variant SKU': product.code,
        'Variant Grams': '0',
        'Variant Inventory Tracker': 'shopify',
        'Variant Inventory Qty': product.quantity,
        'Variant Inventory Policy': 'deny',
        'Variant Fulfillment Service': 'manual',
        'Variant Price': product.price.toFixed(2),
        'Variant Compare At Price': '',
        'Variant Requires Shipping': 'true',
        'Variant Taxable': 'true',
        'Variant Barcode': product.ean,
        'Image Src': product.image,
        'Image Position': '1',
        'Image Alt Text': product.name,
        'Gift Card': 'false',
        'SEO Title': `${product.name} - ${product.brand || ''}`,
        'SEO Description': product.description.substring(0, 320),
        'Google Shopping / Google Product Category': product.category,
        'Google Shopping / Gender': '',
        'Google Shopping / Age Group': '',
        'Google Shopping / MPN': product.code,
        'Google Shopping / AdWords Grouping': '',
        'Google Shopping / AdWords Labels': '',
        'Google Shopping / Condition': getCondition(product.listingStatus),
        'Google Shopping / Custom Product': '',
        'Google Shopping / Custom Label 0': '',
        'Google Shopping / Custom Label 1': '',
        'Google Shopping / Custom Label 2': '',
        'Google Shopping / Custom Label 3': '',
        'Google Shopping / Custom Label 4': '',
        'Variant Image': '',
        'Variant Weight Unit': 'kg',
        'Variant Tax Code': '',
        'Cost per item': '',
        'Status': 'active'
    };

    // Note: The order of values must match the order of headers
    return headers.map(header => escapeCsvField(rowData[header as keyof typeof rowData])).join(',');
  });

  const csvContent = [
    headers.join(','),
    ...rows
  ].join('\n');

  return csvContent;
};
