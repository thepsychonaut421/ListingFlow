// This file is generated by Firebase Studio

import type { Product } from './types';

// Helper function to escape CSV fields
const escapeCsvField = (field: any): string => {
  if (field === null || field === undefined) {
    return '';
  }
  const stringField = String(field);
  // If the field contains a comma, double quote, or newline, enclose it in double quotes
  if (/[",\n]/.test(stringField)) {
    // Within a quoted field, any double quote must be escaped by another double quote
    return `"${stringField.replace(/"/g, '""')}"`;
  }
  return stringField;
};

export const generateEbayCsv = (products: Product[]): string => {
  const headers = [
    'Action(SiteID=US|Country=US|Currency=USD|Version=1193|CC=UTF-8)',
    'Category',
    'Title',
    'Subtitle',
    'Relationship',
    'RelationshipDetails',
    'ItemID',
    'ConditionID',
    'ItemSpecifics',
    'PicURL',
    'Description',
    'Format',
    'Duration',
    'StartPrice',
    'Quantity',
    'Location',
    'ShippingDetails',
    'DispatchTimeMax',
    'ReturnsAcceptedOption',
    'ReturnsWithinOption',
    'ShippingCostPaidByOption',
    'CustomLabel'
  ];

  const rows = products.map(product => {
    // Mapping product data to eBay format
    // Many fields are given default values as per a typical eBay listing
    const rowData = {
      'Action(SiteID=US|Country=US|Currency=USD|Version=1193|CC=UTF-8)': 'Add',
      'Category': product.category || '1', // Default to a placeholder category '1' if not set
      'Title': product.name,
      'Subtitle': '',
      'Relationship': '',
      'RelationshipDetails': '',
      'ItemID': '',
      'ConditionID': '1000', // 1000 for "New"
      'ItemSpecifics': `Brand=Unbranded`,
      'PicURL': product.image,
      'Description': product.description,
      'Format': 'FixedPrice',
      'Duration': 'GTC', // Good 'Til Canceled
      'StartPrice': product.price,
      'Quantity': product.quantity,
      'Location': product.location || 'US',
      'ShippingDetails': 'ShippingMethodStandard:1:FREE',
      'DispatchTimeMax': '3',
      'ReturnsAcceptedOption': 'ReturnsAccepted',
      'ReturnsWithinOption': 'Days_30',
      'ShippingCostPaidByOption': 'Buyer',
      'CustomLabel': product.code, // Use SKU for CustomLabel
    };

    return headers.map(header => escapeCsvField(rowData[header as keyof typeof rowData])).join(',');
  });

  return [headers.join(','), ...rows].join('\n');
};
