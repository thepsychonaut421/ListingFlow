// This file is generated by Firebase Studio
import type { Product, ProductImage } from './types';

// Helper function to safely get a value from different possible keys.
const pickVal = (
  product: Product,
  specs: Record<string, any>,
  ...keys: string[]
): string => {
   // Build a lowercase view of specs once for efficient, safe case-insensitive lookup.
  const specsLower = Object.fromEntries(
    Object.entries(specs).map(([kk, vv]) => [kk.toLowerCase(), vv])
  );

  for (const k of keys) {
    const keyLower = k.toLowerCase();
    const v =
      specs[k] ??                      // 1. Exact key on specs
      (product as any)[k] ??           // 2. Exact key on product
      specsLower[keyLower] ??          // 3. Case-insensitive key on specs
      (product as any)[keyLower];      // 4. Case-insensitive key on product
      
    if (v !== undefined && v !== null && String(v).trim() !== '') {
      return Array.isArray(v) ? v.join(', ') : String(v).trim();
    }
  }
  return '';
};

const createImagePayload = (image: ProductImage) => {
  // If it's a Data URI, extract the base64 part for attachment.
  if (image.url.startsWith('data:')) {
    const base64Data = image.url.split(',')[1];
    return { attachment: base64Data };
  }
  // Otherwise, it's a regular URL.
  return { src: image.url };
}


// Main function to publish a product to Shopify
export async function publishToShopify(product: Product): Promise<any> {
    const shopUrl = process.env.SHOPIFY_STORE_URL;
    const accessToken = process.env.SHOPIFY_ADMIN_ACCESS_TOKEN;

    if (!shopUrl || !accessToken) {
        throw new Error('Shopify credentials (URL or Access Token) are not configured in environment variables.');
    }

    const specs = product.technicalSpecs || {};
    const brand = pickVal(product, specs, 'Marke', 'brand', 'Brand');
    const productType = pickVal(product, specs, 'Produktart', 'productType', 'Type');
    const ean = pickVal(product, specs, 'EAN', 'ean', 'Barcode');
    const weightInGrams = parseFloat(pickVal(product, specs, 'Gewicht', 'weight').replace(/[^0-9.]/g, '')) * 1000 || 0;
    
    // Construct the Shopify product payload
    const shopifyProduct = {
        product: {
            title: product.name,
            body_html: product.description || '',
            vendor: brand,
            product_type: productType,
            tags: product.tags ? product.tags.join(', ') : '',
            status: 'active', // 'active', 'draft', or 'archived'
            variants: [
                {
                    price: product.price,
                    sku: product.code,
                    inventory_management: 'shopify',
                    inventory_quantity: product.quantity,
                    barcode: ean,
                    weight: weightInGrams,
                    weight_unit: 'g'
                }
            ],
            images: product.images ? product.images.map(createImagePayload) : []
        }
    };
    
    const endpoint = `${shopUrl.replace(/\/$/, '')}/admin/api/2023-10/products.json`;

    const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-Shopify-Access-Token': accessToken,
        },
        body: JSON.stringify(shopifyProduct),
        cache: 'no-store'
    });

    if (!response.ok) {
        const errorBody = await response.json();
        const errorMessage = errorBody.errors ? JSON.stringify(errorBody.errors) : 'An unknown error occurred.';
        throw new Error(`Shopify API Error: ${response.status} - ${errorMessage}`);
    }

    return response.json();
}
