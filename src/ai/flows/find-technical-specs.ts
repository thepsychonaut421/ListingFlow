// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview An AI agent for extracting technical specifications from product text.
 *
 * - findTechnicalSpecs - A function that extracts technical specs.
 * - FindTechnicalSpecsInput - The input type for the findTechnicalSpecs function.
 * - FindTechnicalSpecsOutput - The return type for the findTechnicalSpecs function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'zod';

const FindTechnicalSpecsInputSchema = z.object({
  productName: z.string().describe('The name/title of the product.'),
  description: z.string().optional().describe('The description of the product.'),
});
export type FindTechnicalSpecsInput = z.infer<typeof FindTechnicalSpecsInputSchema>;

const FindTechnicalSpecsOutputSchema = z.object({
   specs: z.any().describe('A key-value object of technical specifications found for the product. For example, {"Leistung": "600 W", "Material": "Edelstahl"}.'),
});
export type FindTechnicalSpecsOutput = z.infer<typeof FindTechnicalSpecsOutputSchema>;

export async function findTechnicalSpecs(input: FindTechnicalSpecsInput): Promise<FindTechnicalSpecsOutput> {
  return findTechnicalSpecsFlow(input);
}

const prompt = ai.definePrompt({
    name: 'findTechnicalSpecsPrompt',
    input: { schema: FindTechnicalSpecsInputSchema },
    output: { schema: FindTechnicalSpecsOutputSchema },
    prompt: `From the following German product title and description, extract the product's key technical specifications in JSON format.
The output must be only a single JSON object with the extracted specifications. The keys and values in the JSON object must be in German.

Extract the following fields if available:
- Marke (brand)
- Modell (model)
- Leistung (power in W)
- Kapazität (capacity in L)
- Material (material)
- Maximale Temperatur (max temperature in °C)
- Spannung (voltage in V)
- Maße (dimensions in cm)
- Timer-Bereich (timer range in minutes)
- Funktionen (functions as a list of strings)
- Zubehör (accessories as a list of strings)

If a field is not available in the text, do not include it in the final JSON object.

Title: {{{productName}}}
Description: {{{description}}}

Output only a single JSON object with the extracted specifications, with no extra text or explanations.
`,
});


const findTechnicalSpecsFlow = ai.defineFlow(
  {
    name: 'findTechnicalSpecsFlow',
    inputSchema: FindTechnicalSpecsInputSchema,
    outputSchema: FindTechnicalSpecsOutputSchema,
  },
  async (input) => {
    const { output } = await prompt(input);
    // Ensure the output conforms to the expected structure even if AI returns something unexpected.
    if (output && typeof output.specs === 'object' && output.specs !== null) {
      return { specs: output.specs };
    }
    return { specs: {} };
  }
);
