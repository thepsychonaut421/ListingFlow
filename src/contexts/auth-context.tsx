// This file is generated by Firebase Studio
'use client';

import * as React from 'react';
import {
  onAuthStateChanged,
  signOut,
  type User,
  OAuthProvider,
  signInWithPopup,
  signInWithRedirect,
} from 'firebase/auth';
import { auth } from '@/lib/firebase/client';
import { Loader2 } from 'lucide-react';
import { usePathname, useRouter, useSearchParams } from 'next/navigation';


interface AuthContextType {
  user: User | null;
  loading: boolean;
  logout: () => Promise<void>;
  loginWithMicrosoft: () => Promise<Error | void>;
}

const AuthContext = React.createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = React.useState<User | null>(null);
  const [loading, setLoading] = React.useState(true);
  const router = useRouter();
  const pathname = usePathname();
  const searchParams = useSearchParams();
  const redirectedRef = React.useRef(false);


  React.useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setUser(user);
      setLoading(false);
    });

    return () => unsubscribe();
  }, []);

  React.useEffect(() => {
    if (loading || redirectedRef.current) return;

    const isProtectedRoute = !['/login'].includes(pathname);
    
    if (!user && isProtectedRoute) {
        redirectedRef.current = true;
        router.replace('/login');
    } else if (user && pathname === '/login') {
        redirectedRef.current = true;
        const nextUrl = searchParams.get('next') || '/';
        router.replace(nextUrl);
    } else {
        redirectedRef.current = false;
    }
  }, [user, loading, pathname, router, searchParams]);

  const logout = () => {
    return signOut(auth);
  };

  const loginWithMicrosoft = async (): Promise<Error | void> => {
    const tenantId = process.env.NEXT_PUBLIC_MICROSOFT_TENANT_ID;
    if (!tenantId) {
      return new Error(
        'Microsoft Tenant ID is not configured. Please set NEXT_PUBLIC_MICROSOFT_TENANT_ID in your environment variables.'
      );
    }
    const provider = new OAuthProvider('microsoft.com');
    provider.setCustomParameters({
      tenant: tenantId,
      prompt: 'select_account',
    });

    try {
      await signInWithPopup(auth, provider);
    } catch (e: any) {
      if (e?.code === 'auth/popup-blocked' || e?.code === 'auth/cancelled-popup-request') {
        await signInWithRedirect(auth, provider);
        return;
      }
      console.error('Microsoft login error:', e);
      return e instanceof Error
        ? e
        : new Error('An unexpected error occurred during Microsoft login.');
    }
  };
  
  const value = {
    user,
    loading,
    logout,
    loginWithMicrosoft,
  };

  if (loading) {
     return (
        <div className="flex items-center justify-center min-h-screen">
          <Loader2 className="h-8 w-8 animate-spin text-primary" />
        </div>
      );
  }

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = React.useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}
